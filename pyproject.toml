[tool.poetry]
name = "uiprotect"
version = "1.19.2"
description = "Python API for Unifi Protect (Unofficial)"
authors = ["UI Protect Maintainers <ui@koston.org>"]
license = "MIT"
readme = "README.md"
repository = "https://github.com/uilibs/uiprotect"
documentation = "https://uiprotect.readthedocs.io"
classifiers = [
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Build Tools",
    "Development Status :: 5 - Production/Stable",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12"
]
packages = [
    { include = "uiprotect", from = "src" },
]

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/uilibs/uiprotect/issues"
"Changelog" = "https://github.com/uilibs/uiprotect/blob/main/CHANGELOG.md"

[tool.poetry.scripts]
uiprotect = "uiprotect.cli:app"

[tool.poetry.dependencies]
python = ">=3.10"
rich = ">=10"
async-timeout = ">=3.0.1"
aiofiles = ">=23"
aiohttp = ">=3.9.0"
aioshutil = ">=1.3"
dateparser = ">=1.1.0"
orjson = ">=3.9.15"
packaging = ">=23"
pillow = ">=10"
platformdirs = ">=4"
pydantic = "!=1.9.1,>=1.10.13"
pyjwt = ">=2.6"
yarl = ">=1.9"
typer = ">=0.12.3"

[tool.poetry.group.dev.dependencies]
pytest = "^7.0"
pytest-cov = "^3.0"
aiosqlite = ">=0.20.0"
asttokens = "^2.4.1"
pytest-asyncio = "^0.23.7"
pytest-benchmark = "^4.0.0"
pytest-sugar = "^1.0.0"
pytest-timeout = "^2.3.1"
pytest-xdist = "^3.6.1"
types-aiofiles = "^23.2.0.20240403"
types-dateparser = "^1.2.0.20240420"
mypy = "^1.10.0"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
myst-parser = { version = ">=0.16", python = ">=3.11"}
sphinx = { version = ">=4.0", python = ">=3.11"}
furo = { version = ">=2023.5.20", python = ">=3.11"}
sphinx-autobuild = { version = ">=2024.0.0", python = ">=3.11"}
mike = "^2.1.1"
mkdocs-material = "^9.5.26"
mkdocs-material-extensions = "^1.3.1"
pymdown-extensions = "^10.8.1"
mkdocs-git-revision-date-localized-plugin = "^1.2.6"
mkdocs-include-markdown-plugin = "^6.1.1"
mkdocstrings = "^0.25.1"
mkdocstrings-python = "^1.10.3"

[tool.semantic_release]
version_toml = ["pyproject.toml:tool.poetry.version"]
version_variables = [
    "src/uiprotect/__init__.py:__version__",
    "docs/conf.py:release",
]
build_command = "pip install poetry && poetry build"

[tool.semantic_release.changelog]
exclude_commit_patterns = [
    "chore*",
    "ci*",
]

[tool.semantic_release.changelog.environment]
keep_trailing_newline = true

[tool.semantic_release.branches.main]
match = "main"

[tool.semantic_release.branches.noop]
match = "(?!main$)"
prerelease = true

[tool.pytest.ini_options]
addopts = "-v -Wdefault --cov=uiprotect --cov-report=term-missing:skip-covered -n=auto"
pythonpath = ["src"]

[tool.coverage.run]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "@overload",
    "if TYPE_CHECKING",
    "raise NotImplementedError",
    'if __name__ == "__main__":',
]

[tool.ruff]
target-version = "py310"
line-length = 88

[tool.ruff.lint]
ignore = [
    "S101", # use of assert
    "D203", # 1 blank line required before class docstring
    "D212", # Multi-line docstring summary should start at the first line
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public module
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public module
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    "D107", # Missing docstring in `__init__`
    "D400", # First line should end with a period
    "D401", # First line of docstring should be in imperative mood
    "D205", # 1 blank line required between summary line and description
    "D415", # First line should end with a period, question mark, or exclamation point
    "D417", # Missing argument descriptions in the docstring
    "E501", # Line too long
    "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
    "B008", # Do not perform function call
    "S110", # `try`-`except`-`pass` detected, consider logging the exception
    "D106", # Missing docstring in public nested class
    "UP007", # typer needs Optional syntax
    "UP038", # Use `X | Y` in `isinstance` is slower
]
select = [
    "B",   # flake8-bugbear
    "D",   # flake8-docstrings
    "C4",  # flake8-comprehensions
    "S",   # flake8-bandit
    "F",   # pyflake
    "E",   # pycodestyle
    "W",   # pycodestyle
    "UP",  # pyupgrade
    "I",   # isort
    "RUF", # ruff specific
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = [
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "S101",
]
"setup.py" = ["D100"]
"conftest.py" = ["D100"]
"docs/conf.py" = ["D100"]

[tool.ruff.isort]
known-first-party = ["uiprotect", "tests"]

[tool.mypy]
disable_error_code = "import-untyped,unused-ignore"
check_untyped_defs = true
ignore_missing_imports = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
mypy_path = "src/"
no_implicit_optional = true
show_error_codes = true
warn_unreachable = true
warn_unused_ignores = true
exclude = [
    'docs/.*',
    'setup.py',
]

[[tool.mypy.overrides]]
module = "tests.*"
allow_untyped_defs = true

[[tool.mypy.overrides]]
module = "docs.*"
ignore_errors = true

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
